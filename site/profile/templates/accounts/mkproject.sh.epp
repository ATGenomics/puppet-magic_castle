#!/bin/bash

# mkproject.sh watches 389-ds access log for operations related to group
# matching a regex ($PROJECT_REGEX) with the intent of automatically
# manipulating Slurm accounts and folder under /project associated with these
# groups.

# Three operations are currently supported: ADD, MOD and DEL.
# - ADD triggers a creation of Slurm account and directory under /project
# - MOD triggers either the additions of users to the associated Slurm
#   accounts and their folder under /project/GID/`username`
#   or it trigger the removals of the users from the associated Slurm account
#   and the removal of the symlink from the users home to the project folder.
# - DEL trigger the removal of all users from the associated Slurm account
#   and the removal of the symlink to the project from all previous member
#   home folders.


PROJECT_REGEX="<%= $project_regex %>"
WITH_FOLDER="<%= $with_folder %>"
PREV_CONN=""

source /sbin/account_functions.sh

MODPROJECT_CACHE=/var/tmp/modproject.cache
MODPROJECT_CACHE_SIZE=50

MKPROJECT_CACHE=/var/tmp/mkproject.cache
MKPROJECT_CACHE_SIZE=50

MODPROJECT_PIPE=/var/tmp/modproject.pipe
MODPROJECT_RETRY_PIPE=/var/tmp/modproject_retry.pipe
MKHOME_MODPROJECT_PIPE=/var/tmp/mkhome_modproject.pipe

trap "rm -f ${MODPROJECT_PIPE} ${MODPROJECT_RETRY_PIPE} ${MODPROJECT_CACHE} ${MKPROJECT_CACHE}" EXIT

if [[ ! -p ${MODPROJECT_PIPE} ]]; then
    mkfifo -m=600 ${MODPROJECT_PIPE}
fi

if [[ ! -p ${MODPROJECT_RETRY_PIPE} ]]; then
    mkfifo -m=600 ${MODPROJECT_RETRY_PIPE}
fi

install -m 600 /dev/null ${MKPROJECT_CACHE}
install -m 600 /dev/null ${MODPROJECT_CACHE}

# Loop over three sources of project modification
# 1. Modification coming from SLAPD log
# 2. Modification coming from mkhome daemon
# 3. Modification coming from the loop that have errored on a previous try.
(
    tail -F ${MODPROJECT_PIPE} &
    tail -F ${MODPROJECT_RETRY_PIPE} &
    tail -F ${MKHOME_MODPROJECT_PIPE}
) |
while read GROUP WITH_FOLDER USERNAMES; do
    if [[ ! -z "${USERNAMES}" ]]; then
        USERNAMES=$(
            for USERNAME in ${USERNAMES}; do
                if ! grep -q "${GROUP} ${WITH_FOLDER} ${USERNAME}" ${MODPROJECT_CACHE}; then
                    echo ${USERNAME}
                fi
            done
        )
        if [[ -z "${USERNAMES}" ]]; then
            continue
        fi
    fi
    modproject ${GROUP} ${WITH_FOLDER} ${USERNAMES}
    case $? in
        0)
            for USERNAME in ${USERNAMES}; do
                echo "${GROUP}" "${WITH_FOLDER}" "${USERNAME}" >> ${MODPROJECT_CACHE}
            done
            echo "$(tail -n ${MODPROJECT_CACHE_SIZE} ${MODPROJECT_CACHE})" > ${MODPROJECT_CACHE}
            ;;
        1)
            echo "${GROUP}" "${WITH_FOLDER}" "${USERNAMES}" > ${MODPROJECT_RETRY_PIPE} &
            sleep 5
            ;;
        *) ;;
    esac
done &

tail -F /var/log/dirsrv/slapd-*/access |
grep --line-buffered -P "dn=\"cn=${PROJECT_REGEX},cn=groups" |
sed -u -r 's/^.*conn=([0-9]*) op=[0-9]* (\w+) dn="cn=(.*),cn=groups.*$/\1 \2 \3/' |
while read CONN OP GROUP; do
    # An operation has been done on a group in LDAP
    # We have already completed this request
    if [[ "${PREV_CONN}" == "${CONN}" ]]; then
        continue
    fi

    # We wait for the operation $CONN to be completed.
    # Taken from StackExchange:
    # https://unix.stackexchange.com/questions/416150/make-tail-f-exit-on-a-broken-pipe
    {
        grep --line-buffered -q -m 1 "conn=${CONN} op=[0-9]* UNBIND";
        kill -s PIPE "$!";
    } < <(tail -n +0 -F /var/log/dirsrv/slapd-*/access 2> /dev/null)

    # We support three operations : ADD, MOD or DEL
    case ${OP} in
        ADD)
            if grep -q "${GROUP}" ${MKPROJECT_CACHE}; then
                continue
            fi
            mkproject ${GROUP} ${WITH_FOLDER}
            if [[ $? -eq 0 ]]; then
                echo "${GROUP}" >> ${MKPROJECT_CACHE}
                if [[ $(wc -l < ${MKPROJECT_CACHE}) -gt ${MKPROJECT_CACHE_SIZE} ]]; then
                    sed -i '1d' ${MKPROJECT_CACHE}
                fi
            fi
            ;;
        MOD)
            # One or more groups have been modified
            # We grep the log for all operations related to request $CONN that contain a uid
            USERNAMES=$(grep -oP "conn=${CONN} op=[0-9]* SRCH base=\"uid=\K([a-z0-9A-Z_-]*)(?=,cn=users)" /var/log/dirsrv/slapd-*/access | sort | uniq)
            # We grep all unique groups that have been modified
            MOD_GROUPS=$(grep -oP "conn=${CONN} op=[0-9]* MOD dn=\"cn=\K${PROJECT_REGEX}" /var/log/dirsrv/slapd-*/access | uniq)
            for GROUP in ${MOD_GROUPS}; do
                echo ${GROUP} ${WITH_FOLDER} ${USERNAMES} > ${MODPROJECT_PIPE} &
            done
            ;;
        DEL)
            delproject ${GROUP} ${WITH_FOLDER}
            ;;
        *)
            echo "Unknown operation ${OP}"
            ;;
    esac
    PREV_CONN="${CONN}"
done
